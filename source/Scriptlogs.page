Menu="Dashboard:0"
Icon="ScriptLogsLogo.png"
---
<?php
require_once '/usr/local/emhttp/plugins/dynamix/include/Helpers.php';

// Handle AJAX requests
if (isset($_GET['action']) && $_GET['action'] === 'get_script_states') {
    header('Content-Type: application/json');
    $cfg = parse_plugin_cfg('scriptlogs', true);
    // Gracefully handle empty or non-existent settings
    $enabled_scripts_str = $cfg['ENABLED_SCRIPTS'] ?? '';
    $enabled_scripts = !empty($enabled_scripts_str) ? explode(',', $enabled_scripts_str) : [];
    
    $response_data = [];

    foreach ($enabled_scripts as $script_name) {
        $script_data = ['name' => $script_name, 'status' => 'idle', 'log' => ''];
        $pid_file = "/var/run/user.scripts/pid.{$script_name}";
        $log_file_finished = "/tmp/user.scripts/logs/{$script_name}";
        $log_file_inprogress = '/tmp/user.scripts/logs/in_progress';

        if (file_exists($pid_file)) {
            $script_data['status'] = 'running';
            // If running, the log is in 'in_progress'
            if (file_exists($log_file_inprogress)) {
                 $lines = array_slice(file($log_file_inprogress, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES), -100);
                 $script_data['log'] = htmlspecialchars(implode("\n", $lines), ENT_QUOTES, 'UTF-8');
            }
        } else {
            // Not running, check for a finished log file
            if (file_exists($log_file_finished)) {
                $lines = array_slice(file($log_file_finished, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES), -100);
                $script_data['log'] = htmlspecialchars(implode("\n", $lines), ENT_QUOTES, 'UTF-8');
            } else {
                $script_data['log'] = "No log file found for this script.";
            }
        }
        $response_data[] = $script_data;
    }
    
    echo json_encode($response_data);
    exit;
}

// Load settings for the tile display
$cfg = parse_plugin_cfg('scriptlogs', true);
$enabled_scripts_str = $cfg['ENABLED_SCRIPTS'] ?? '';
$enabled_scripts_js = !empty($enabled_scripts_str) ? json_encode(explode(',', $enabled_scripts_str)) : '[]';

$pluginname = "scriptlogs";

// The HTML structure now needs a placeholder for the tabs
$mytiles[$pluginname]['column1'] = <<<EOT
<tbody id="db-scriptlogs" title="Script Logs">
    <tr>
        <td class="next" colspan="3">
            <i class="fa fa-terminal"></i>
            <div class="section">
                Script Logs
                <div id="script-tabs-container" style="margin-top: 5px; display: flex; flex-wrap: wrap; gap: 5px;">
                    </div>
            </div>
        </td>
    </tr>
    <tr class="dash_scriptlogs_toggle scriptlogs-content">
        <td colspan="3">
            <div id="scriptlogs-container" style="height:200px; overflow-y:auto; font-family: monospace; font-size: 11px; background-color: #1a1a1a; color: #e0e0e0; padding: 8px; border: 1px solid #444; border-radius: 3px;">
                <pre id="scriptlogs-logs" style="margin: 0; white-space: pre-wrap; word-wrap: break-word;">Select a script to see its log.</pre>
            </div>
            <div style="margin-top: 5px; font-size: 10px; color: #888; text-align: right;">
                Last Update: <span id="scriptlogs-timestamp"></span>
            </div>
        </td>
    </tr>
</tbody>
EOT;
?>

<script type="text/javascript">
    /* global $ */
    var enabledScripts = <?=$enabled_scripts_js?>;
    
    // The function is now defined directly inside the page, before it is called.
    function scriptlogs_status() {
        if (!enabledScripts || enabledScripts.length === 0) {
            $('#scriptlogs-logs').text('No scripts selected. Please check your Scriptlogs settings.');
            $('#script-tabs-container').empty();
            return;
        }

        // Use $.getJSON to ensure the response is parsed as a JavaScript array/object.
        $.getJSON('/Dashboard/scriptlogs?action=get_script_states', function(scripts) {
            const tabContainer = $('#script-tabs-container');
            const logDisplay = $('#scriptlogs-logs');
            const timestampDisplay = $('#scriptlogs-timestamp');
            
            const previouslySelected = tabContainer.find('.selected-script').data('script-name');
            
            tabContainer.empty();

            if (scripts && Array.isArray(scripts) && scripts.length > 0) {
                scripts.forEach(script => {
                    let bgColor = '#555'; // Gray for idle
                    if (script.status === 'running') bgColor = '#4CAF50'; // Green for running
                    if (script.status === 'error') bgColor = '#f44336'; // Red for error

                    const tab = $('<div>')
                        .addClass('script-tab')
                        .text(script.name)
                        .css({
                            'background-color': bgColor,
                            'color': 'white',
                            'padding': '4px 8px',
                            'border-radius': '3px',
                            'cursor': 'pointer',
                            'font-size': '10px'
                        })
                        .data('script-name', script.name)
                        .data('log-content', script.log);

                    tab.on('click', function() {
                        tabContainer.find('.script-tab').css('border', 'none').removeClass('selected-script');
                        $(this).css('border', '1px solid #FFF').addClass('selected-script');
                        logDisplay.text($(this).data('log-content'));
                        
                        const logContainer = $('#scriptlogs-container');
                        logContainer.scrollTop(logContainer[0].scrollHeight);
                    });

                    tabContainer.append(tab);
                });
                
                let selectedTab = tabContainer.find('.script-tab').filter(function() {
                    return $(this).data('script-name') === previouslySelected;
                });

                if (selectedTab.length > 0) {
                    selectedTab.trigger('click');
                } else {
                    tabContainer.children().first().trigger('click');
                }
            } else {
                logDisplay.text('No scripts selected to display.');
            }

            timestampDisplay.text(new Date().toLocaleTimeString());

        }).fail(function(jqXHR, textStatus, errorThrown) {
            console.error("Scriptlogs AJAX Error:", textStatus, errorThrown);
            $('#scriptlogs-logs').text('Error loading script states. Check browser console (F12) for details.');
        });
    }

    // This block now calls the function defined just above.
    $(function() {
        var refreshEnabled = <?=json_encode($cfg['REFRESH_ENABLED'] === '1')?>;
        var refreshInterval = <?=json_encode(intval($cfg['REFRESH_INTERVAL']) * 1000)?>;
        
        if (refreshEnabled && refreshInterval > 0) {
            scriptlogs_status();
            setInterval(scriptlogs_status, refreshInterval);
        } else {
            scriptlogs_status();
        }
    });
</script>